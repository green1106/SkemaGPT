@page "/import"
@using System.Net
@inject IWebHostEnvironment env
@rendermode InteractiveServer

<div>
    <h2 class="display-4">Import</h2>
</div>

@if (Message.Length > 0)
{
    <p class="alert alert-secondary" role="alert">@Message</p>
}

<EditForm Model="@Ticket" method="post" OnValidSubmit="@OnSubmit" enctype="multipart/form-data">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <Dropdown Color="DropdownColor.Primary">

    </Dropdown>

    <InputText class="form-control mb-4" placeholder="Title" @bind-Value="@Ticket.Type" />
    <InputFile class="form-control mb-4" OnChange="@SetFile" multiple />
    <button class="btn btn-primary" type="submit">Submit</button>
</EditForm>

@code {
    private TicketValidator? _fluentTicketValidator;

    private ServerSignalRTicket Ticket { get; set; } = new();
    private long maxFileSize = 5120000;
    private string Message { get; set; } = String.Empty;

    private void SetFile(InputFileChangeEventArgs e)
    {
        Ticket.File = e.File;
    }

    private async Task OnSubmit()
    {
        try
        {
            string safeFileName = WebUtility.HtmlEncode(Ticket.Type);

            if (Ticket.File.ContentType != "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet")
            {
                Message = "File must be an Excel file";
                return;
            }

            // Save file locally
            var path = Path.Combine(env.ContentRootPath, "Files", safeFileName);
            await using FileStream fs = new(path, FileMode.Create);
            await Ticket.File.OpenReadStream(maxFileSize).CopyToAsync(fs);

            Message = "File uploaded!";
        }
        catch (Exception e)
        {
            Message = "Error: " + e.Message;
        }
    }

    public class ServerSignalRTicket
    {
        [Required]
        public string Type { get; set; } = String.Empty;

        public IBrowserFile File { get; set; }
    }

    // Not used right now
    public class TicketValidator : AbstractValidator<ServerSignalRTicket>
    {
        public TicketValidator()
        {
            RuleFor(x => x.Type).NotEmpty().WithMessage("Title is required");
            RuleFor(x => x.File).NotNull().WithMessage("File is required");

            RuleFor(x => x.File).Must(x => x != null && x.ContentType.Contains("application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"))
                .WithMessage("File must be an Excel file");
        }
    }
}